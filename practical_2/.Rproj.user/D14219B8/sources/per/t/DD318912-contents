#1.dataframes
#create some datasets, first a vector of 1-100 and 101-200
Data1 <- c(1:100)
Data2 <- c(101:200)
#Plot the data
plot(Data1, Data2, col="red")

#just for fun, create some more, this time some normally distributed
#vectors of 100 numbers
Data3 <- rnorm(100, mean = 53, sd=34)
Data4 <- rnorm(100, mean = 64, sd=14)
#plot
plot(Data3, Data4, col="blue")

df <- data.frame(Data1, Data2)
plot(df, col="green")

library(tidyverse)
#show the first 10 and then last 10 rows of data in df...
df %>%
  head()

df %>%
  tail()

df[1:10, 1]
df[5:15,]
df[c(2,3,6),2]
df[,1]
library(dplyr)
df <- df %>%
  dplyr::rename(column1 = Data1, column2=Data2)
df %>% 
  dplyr::select(column1)
df$column1
df[["column1"]]


#2.data cleaning
#old skool cleaning
LondonDataOSK<- read.csv("prac2_data","ward-profiles-excel-version.csv", 
                             header = TRUE, 
                             sep = ",",  
                             encoding = "latin1")

#install.packages("here")
library(here)
#here::here()

#new skool cleaning
#wang the data in straight from the web using read_csv, 
#skipping over the 'n/a' entries as you go...
LondonData <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv",
                       locale = locale(encoding = "latin1"),
                       na = "n/a")

class(LondonData)
Datatypelist <- LondonData %>% 
  summarise_all(class) %>%
  pivot_longer(everything(), 
               names_to="All_variables", 
               values_to="Variable_class")

Datatypelist

library(tidyverse)
LondonData <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", 
                           locale = locale(encoding = "latin1"))
LondonData <- edit(LondonData)

summary(df)

LondonData%>%
  colnames()%>%
  # just look at the head, top5
  head()

LondonBoroughs<-LondonData[626:658,]
#or
LondonBoroughs<-LondonData%>%
  slice(626:658)

Femalelifeexp<- LondonData %>% 
  filter(`Female life expectancy -2009-13`>90)
LondonBoroughs<- LondonData %>% 
  filter(str_detect(`New code`, "^E09"))

LondonBoroughs$`Ward name`
#or
LondonBoroughs %>% 
  dplyr::select(`Ward name`) %>%
  print()

LondonBoroughs<-LondonBoroughs %>%
  distinct()

#select columns 1,19,20 and 21
LondonBoroughs_manualcols<-LondonBoroughs[,c(1,19,20,21)]
#or
#select columns 1,19,20 and 21
LondonBoroughs_dplyrcols<-LondonBoroughs %>%
  dplyr::select(c(1,19,20,21))
#or
LondonBoroughs_contains<-LondonBoroughs %>% 
  dplyr::select(contains("expectancy"), 
                contains("obese - 2011/12 to 2013/14"),
                contains("Ward name")) 

#Renaming columns
install.packages("janitor")
library(janitor)
LondonBoroughs <- LondonBoroughs %>%
  dplyr::rename(Borough=`Ward name`)%>%
  clean_names()

#add new variables based on existing ones
Life_expectancy <- LondonBoroughs %>% 
  #new column with average of male and female life expectancy
  mutate(averagelifeexpectancy= (female_life_expectancy_2009_13 +
                                   male_life_expectancy_2009_13)/2)%>%
  #new column with normalised life expectancy
  mutate(normalisedlifeepectancy= averagelifeexpectancy /
           mean(averagelifeexpectancy))%>%
  #select only columns we want
  dplyr::select(new_code,
                borough,
                averagelifeexpectancy, 
                normalisedlifeepectancy)%>%
  #arrange in descending order
  #ascending is the default and would be
  #arrange(normalisedlifeepectancy)
  arrange(desc(normalisedlifeepectancy))
"""
#top of data
slice_head(Life_expectancy, n=5)
#bottom of data
slice_tail(Life_expectancy,n=5)

#assign the Borough a string
Life_expectancy2 <- Life_expectancy %>%
  mutate(UKcompare = case_when(averagelifeexpectancy>81.16 ~ "above UK average",
                               TRUE ~ "below UK average"))
Life_expectancy2

#know the range of life expectancies that are above the national average
Life_expectancy2_group <- Life_expectancy2 %>%
  mutate(UKdiff = averagelifeexpectancy-81.16) %>%
  group_by(UKcompare)%>%
  summarise(range=max(UKdiff)-min(UKdiff), count=n(), Average=mean(UKdiff))

Life_expectancy2_group

# have more information based on the distribution of the Boroughs compared to 
# the national average, as opposed to just over or under
library(stringr)
Life_expectancy3 <- Life_expectancy %>%
  mutate(UKdiff = averagelifeexpectancy-81.16)%>%
  mutate(across(where(is.numeric), round, 3))%>%
  mutate(across(UKdiff, round, 0))%>%
  mutate(UKcompare = case_when(averagelifeexpectancy >= 81 ~ 
                                 str_c("equal or above UK average by",
                                       UKdiff, 
                                       "years", 
                                       sep=" "), 
                               TRUE ~ str_c("below UK average by",
                                            UKdiff,
                                            "years",
                                            sep=" ")))%>%
  group_by(UKcompare)%>%
  summarise(count=n())

Life_expectancy3

# the difference between the average life expectancy of each
# London Borough compared to the UK average
Life_expectancy4 <- Life_expectancy %>%
  mutate(UKdiff = averagelifeexpectancy-81.16)%>%
  mutate(across(is.numeric, round, 3))%>%
  mutate(across(UKdiff, round, 0))

#plot
plot(LondonBoroughs$male_life_expectancy_2009_13,
     LondonBoroughs$percent_children_in_reception_year_who_are_obese_2011_12_to_2013_14)

# Pimp my graph
install.packages("plotly")

library(plotly)
plot_ly(LondonBoroughs, 
        #data for x axis
        x = ~male_life_expectancy_2009_13, 
        #data for y axis
        y = ~percent_children_in_reception_year_who_are_obese_2011_12_to_2013_14, 
        #attribute to display when hovering 
        text = ~borough, 
        type = "scatter", 
        mode = "markers")
"""

#install the package for producing a map,
install.packages(c("tmap"))

# might also need these ones
install.packages(c("tmaptools", "sf"))

#Load Packages (ignore any error messages about being built under a 
#different R version):
library(tmap)
library(tmaptools)
library(sf)

# this will take a few minutes
# geojson in local folder
EW <- st_read(here::here("prac2_data",
                         "Local_Authority_Districts_December_2011_GCB_EW_2022_7332946967509599510.geojson"))

# shapefile in local folder
EW <- st_read(here::here("prac2_data",
                         "Local_Authority_Districts_December_2011_GCB_EW.shp"))

str(EW)

library(dplyr)   # for mutate and other dplyr functions
library(stringr) # for str_detect
EW <- EW %>%
  mutate(lad11cd = as.character(lad11cd))  # Adjust the column name here

LondonMap<- EW %>%
  filter(str_detect(lad11cd, "^E09"))

#plot it using the qtm function
qtm(LondonMap)

library(janitor)
# clean up all of our names with Janitor
LondonData <- clean_names(LondonData)

#EW is the data we read in straight from the web
BoroughDataMap <- EW %>%
  clean_names()%>%
  # the . here just means use the data already loaded
  filter(str_detect(lad11cd, "^E09"))%>%
  merge(.,
        LondonData, 
        by.x="lad11cd", 
        by.y="new_code",
        no.dups = TRUE)%>%
  distinct(.,lad11cd,
           .keep_all = TRUE)

# use a join type (e.g. left_join()) to merge the data
BoroughDataMap2 <- EW %>%
  clean_names() %>%
  filter(str_detect(lad11cd, "^E09"))%>%
  left_join(., 
            LondonData,
            by = c("lad11cd" = "new_code"))

# create a choropleth map using qtm()
library(tmap)
library(tmaptools)
tmap_mode("view")
qtm(BoroughDataMap, 
    fill = "rate_of_job_seekers_allowance_jsa_claimants_2015")


install.packages(c("OpenStreetMap"))
install.packages("rJava")

library(sf)
library("OpenStreetMap")
#create a box (termed bounding box) around London using the st_box()
tmaplondon <- BoroughDataMap %>%
  st_bbox(.) %>% 
  tmaptools::read_osm(., type = "osm", zoom = NULL)
